db.grades.insertMany([
{ _id: 6305, name : "A. MacDyver", "assignment" : 5, "points" : 24 },
{ _id: 6308, name : "B. Batlock", "assignment" : 3, "points" : 22 },
{ _id: 6312, name : "M. Tagnum", "assignment" : 5, "points" : 30 },
{ _id: 6319, name : "R. Stiles", "assignment" : 2, "points" : 12 },
{ _id: 6322, name : "A. MacDyver", "assignment" : 2, "points" : 14 },
{ _id: 6234, name : "R. Stiles", "assignment" : 1, "points" : 10 }
]);
EXAMPLE: Find the sum of all points of the documents 
whose names are starting with "A

 var pipeline = [{$match:{name:{$regex:/^A/}}}, {$group:{"_id":"$name", total:{$sum:"$points"}}}]
   db.grades.aggregate(pipeline);

   var pipeline = [{$match:{name :{$regex:/^A/}}}, {$group:{"_id":null, totalPoints:{$sum:"$points"}}}];
   db.grades.aggregate(pipeline);

   find All points
   var pipeline = [{$match:{}},{$group:{"_id":null, totalPoints:{$sum:"$points"}}}];
   db.grades.aggregate(pipeline);


   EXAMPLE: Find the sum of all points of the 
   documents whose assignments are less than 4
   var pipeline = [{$match:{assignment:{$lt:4}}},{$group:{"_id":null, totalPoints:{$sum:"$points"}}}];
   db.grades.aggregate(pipeline);


   //How to Count documents
   count()
   db.grades.count();===> to count all
   EXAMPLE: Find the number of documents whose points are less than 19
   db.grades.find({points:{$lt:19}}).count();==> gives number of docs
   db.grades.find({points:{$lt:19}}).count();=== shows those docs that meet condition

   2nd. way . use count() with condition.
   db.grades.count({"points":{$lt:19}});==>3
   db.grades.count({points:{$lt:19}});===>3

   3rd way , use aggregate()
   var pipeline= [{$match:{points:{$lt:19}}},{$count:"Low Points"}];
   db.grades.aggregate(pipeline);



   db.articles.insertMany(
[{"author" : "dave", "score" : 80, "views" : 100 },
{"author" : "dave", "score" : 85, "views" : 521 },
{"author" : "ahn", "score" : 60, "views" : 1000 },
{"author" : "li", "score" : 55, "views" : 5000 },
{"author" : "annT", "score" : 60, "views" : 50 },
{"author" : "li", "score" : 94, "views" : 999 },
{"author" : "ty", "score" : 95, "views" : 1000 }]);

EXAMPLE: Find the number of documents whose score is less than 70 OR greater than 90
//1.Way: Use find() + count()
db.articles.find({$or:[{score:{$lt:70}}, {score:{$gt:90}}]}).count();
//2.Way: Use count() with condition
db.articles.count({$or:[{score:{$lt:70}}, {score:{$gt:90}}]});
//3.Way: Use aggregate()
var pipeline = [{$match:{$or:[{score:{$lt:70}}, {score:{$gt:90}}]}}, {$count:"Mins and Maxs"}];
db.articles.aggregate(pipeline);

var pipeline= [{$match:{$or:[{score:{$lt:70}},{score:{$gt:90}}]}},{$count:"Mins"}];
db.articles.aggregate(pipeline);


EXAMPLE: Find the total number of views of documents whose score
 is less than 80 AND greater than 50
 1st Way
 db.articles.find({$and:[{score:{$lt:80}},{score:{$gt:50}}]}).count();

 2nd way:
 db.articles.count({$and:[{score:{$lt:80}},{score:{$gt:50}}]});

 3rd Way
 var pipeline = [{$match:{db.articles.count({$and:[{score:{$lt:80}},{score:{$gt:50}}]});}},{$count:"Middle Scores"}];
db.articles.aggregate(pipeline);



db.accounting.insertMany(
[{"name" : "dave", "expense":[-80, -40, -50, -120], "earn":[100, 150]},
{"name" : "dave", "expense" : [-60, -30, -20], "earn" : [200, 50, 130] },
{"name" : "ahn", "expense" : [-80, -40, -50], "earn" : [300, 450] },
{"name" : "li", "expense" : [-80, -120], "earn" : [500, 50, 70, 10] },
{"name" : "annT", "expense" : [-140, -50, -120], "earn" : [400] },
{"name" : "li", "expense" : [-120], "earn" : [22, 375, 65] },
{"name" : "ty", "expense" : [-180, -40, -70, -12], "earn" : [500, 650, 400]}]);

//HOW TO ADD NEW FIELDS INTO REPORT

EXAMPLE: Display the total expense, total earn, and net balance 
of every person in the existing documents.

var pipeline =[
    {$addFields:{totalExpense:{$sum:"$expense"},totalEarn:{$sum:"$earn"}}},
    {$addFields:{netBalance:{$add:["$totalExpense","$totalEarn"]}}},
    {$sort:{netBalance:-1}}
    ];
    db.accounting.aggregate(pipeline);

    var pipeline =[
    {$addFields:{totalExpense:{$sum:"$expense"},totalEarn:{$sum:"$earn"}}},
    {$addFields:{netBalance:{$add:["$totalExpense","$totalEarn"]}}},
    {$sort:{netBalance:-1}},
    {$project:{_id:0,expense:0,earn:0}}
    ];
    db.accounting.aggregate(pipeline);



                        ====HOW TO CREATE A COPY OF A COLLECTION IN db
    

    EXAMPLE: Create copy of a accounting collection in 
    database with a new name


NOTE: if we want to create new IDS for copied documents, we should
    :{$project:{_id:0}}   inside the pipeline otherwise mongo db will use the same
    ids  for the copied document the original ones
    1st Style
    var pipeline=[{$project:{_id:0}},{$merge:{into:"accCopy"}}];
    db.accounting.aggregate(pipeline); ===> project: 0 makes copy with new id
    2nd Style
    var pipeline=[{$merge:{into:"accCopy"}}];
    db.accounting.aggregate(pipeline);
3rd Style  copy collection into the existing collection
var pipeline=[{$project:{_id:0}},{$merge:{into:"grades"}}];
    db.accounting.aggregate(pipeline);

    db.stories.insertMany(
[{"author" : "dave", "score" : 75, "views" : 200 },
{"author" : "chris", "score" : 90, "views" : 100 },
{"author" : "dave", "score" : 35, "views" : 3000 },
{"author" : "mary", "score" : 80, "views" : 350 },
{"author" : "dave", "score" : 54, "views" : 333 },
{"author" : "mary", "score" : 97, "views" : 2000 }]);

EXAMPLE: List all story author names?
1st way not recommended because of the repeatation
db.stories.aggregate([{$project:{_id:0,score:0,views:0}}]);

2nd way: recommended use distinct()
db.stories.distinct("author");

//find the number of the stories dave and mary wrote separately
1st. not reccomended:
db.stories.aggregate([{$match:{author:"dave"}},{$count:"Dave's books"}]);
db.stories.aggregate([{$match:{author:"mary"}},{$count:"Dave's books"}]);

2.nd Way==Reccomended use $facet();
var pipeline = [{$facet:{
                            "DaveStories": [{$match:{author:"dave"}}, {$count:"Dave"}],
                            "MaryStories": [{$match:{author:"mary"}}, {$count:"Mary"}]
                        }
              },
              {$project:{
                           "DaveStories":{$arrayElemAt:["$DaveStories.Dave", 0]},
                           "MaryStories":{$arrayElemAt:["$MaryStories.Mary", 0]}
                        }
              }
              ];
db.stories.aggregate(pipeline); 


===HOW TO DO MULTIPLE COMMANDS IN MONGO DB. ====IN A SINGLE method

EXAMPLE: a)Insert {"author" : "mark", "score" : 55, "views" : 555 };
         b)Update dave's score to 55
         c)Replace {"author" : "chris tien", "score" : 55} for {"author" : "chris", "score" : 90, "views" : 100 }
         d)Delete the document whose author is "mary"

db.stories.bulkWrite([
                        {insertOne:{"document":{"author" : "mark", "score" : 55, "views" : 555 }}},
                        {updateOne:{"filter":{author:"dave"}, "update":{$set:{score:55}}}},
                        {replaceOne:{"filter":{author:"chris"},"replacement":{"author":"chris tien",score:55}}},
                        {deleteOne:{"filter":{author:"mary"}}}
                    ]);


insertOne
updateOne
updateMany
deleteOne
deleteMany
replaceOne

db.articles.insertMany(
[{"author" : "dave", "score" : 80, "views" : 100},
{"author" : "leo", "score" : 85, "views" : 521 },
{"author" : "tom", "score" : 60, "views" : 1000 },
{"author" : "john", "score" : 55, "views" : 5000 },
{"author" : "mary", "score" : 60, "views" : 50 },
{"author" : "ali", "score" : 94, "views" : 999 }]);

db.stories.insertMany(
[{"author" : "dave", "score" : 75, "views" : 200 },
{"author" : "chris", "score" : 90, "views" : 100 },
{"author" : "ali", "score" : 35, "views" : 3000 },
{"author" : "mary", "score" : 80, "views" : 350 },
{"author" : "veli", "score" : 54, "views" : 333 },
{"author" : "ocean", "score" : 97, "views" : 2000 }]);


EXAMPLE: Display all documents from both of the collections,
 sort the documents according to the views (FULL JOIN)
 db.articles.aggregate([
        {$unionWith:{coll:"stories"}},
        {$project:{_id:0}},
        {$sort:{author:1}}
 ]);

EXAMPLE: Display the sum of article and story 
views for every author (FULL JOIN)
db.article.aggregate([
            {$unionWith:{coll:"stories"}},
            {$group:{_id:"$author", totalViews:{$sum:"$views"}}},
            {$sort:{totalViews:-1}}
            
]);

EXAMPLE: Display the sum of article and story views for every author 
in articles document (LEFT or RIGHT JOIN)

db.articles.aggregate([
                        {$lookup:{
                                    from:"stories",
                                    localField:"author",
                                    foreignField:"author",
                                    as:"doc"
                                 }
                        },
                        {$unwind:{
                                    path:"$doc", preserveNullAndEmptyArrays:true
                                 }
                        },
                        {$project:{ 
                                    value:{$add:["$views", {$ifNull:["$doc.views", 0]}]},
                                    _id:0, author:1
                                  }
                        }
                      ]);


    


















